(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{532:function(e,t,a){"use strict";a.r(t);var s=a(38),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"contributing-to-scikit-decide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contributing-to-scikit-decide"}},[e._v("#")]),e._v(" Contributing to scikit-decide")]),e._v(" "),a("p",[e._v("This page is intended to help people wanting to contribute to the library.")]),e._v(" "),a("p",[e._v("For now is it mainly about how to test locally changes made to the library.\nIn the future, it will also cover guidelines to follow when contributing.")]),e._v(" "),a("h2",{attrs:{id:"installing-from-source-in-developer-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installing-from-source-in-developer-mode"}},[e._v("#")]),e._v(" Installing from source in developer mode")]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("Disclaimer")]),e._v(": The following process has only been tested on Linux/MacOS platforms.")])]),e._v(" "),a("p",[e._v("In order to install scikit-decide from the source so that your modification to the library are taken into account, we recommmend using poetry.")]),e._v(" "),a("h3",{attrs:{id:"prerequisites-for-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites-for-c"}},[e._v("#")]),e._v(" Prerequisites for C++")]),e._v(" "),a("p",[e._v("To build the  c++ part of the library,\nyou need a minimal environment with c++ compiler, cmake, and boost.\nTo be able to use parallelism based on openMP, you should also install libomp.\nFor instance, on macOS it is done via:")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("xcode-select --install\nbrew "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" cmake\nbrew "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" boost\nbrew "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" libomp\n")])])]),a("h3",{attrs:{id:"installation-with-pyenv-poetry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#installation-with-pyenv-poetry"}},[e._v("#")]),e._v(" Installation with pyenv + poetry")]),e._v(" "),a("p",[e._v("Here are the steps to follow:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v('Clone the source and got to the "scikit-decide" root directory.')]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone --recurse-submodules -j8 https://github.com/Airbus/scikit-decide.git\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" scikit-decide\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Set proper python version (e.g. 3.8.11) for the scikit-decide project.")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("pyenv "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("local")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.8")]),e._v(".11\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Update pip installer (the one that "),a("code",[e._v("pyenv")]),e._v(" makes you use).")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("pip "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -U pip\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Use poetry to install the project:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Install "),a("a",{attrs:{href:"https://python-poetry.org/docs/master/#installation",target:"_blank",rel:"noopener noreferrer"}},[e._v("poetry"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" python -\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PATH")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/.local/bin:"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$PATH")]),e._v('"')]),e._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# add path to poetry")]),e._v("\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Specify to poetry the python version to use so that it creates the appropriate virtual environment.")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("poetry "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("env")]),e._v(" use "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.8")]),e._v(".11\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Install all dependencies as defined in "),a("code",[e._v("poetry.lock")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf build  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# removing previous build")]),e._v("\npoetry "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --extras all\n")])])])])])])]),e._v(" "),a("h3",{attrs:{id:"alternate-installation-with-conda-poetry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#alternate-installation-with-conda-poetry"}},[e._v("#")]),e._v(" Alternate installation with conda + poetry")]),e._v(" "),a("p",[e._v("You can also use conda rather than pyenv. It can be useful when you cannot install poetry via the above method,\nas it can also be installed by conda via the conda-forge channel.")]),e._v(" "),a("ul",[a("li",[a("p",[e._v('Clone the source and got to the "scikit-decide" root directory.')]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone --recurse-submodules -j8 https://github.com/Airbus/scikit-decide.git\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" scikit-decide\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Create and activate a conda environment with the proper python version for the scikit-decide project.")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("conda create -n test_dev_skdecide "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("python")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.8")]),e._v(".11\nconda activate test_dev_skdecide\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Update pip installer")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("pip "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -U pip\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Install poetry in the environment")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("conda "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -c conda-forge poetry\n")])])])]),e._v(" "),a("li",[a("p",[e._v("Install all dependencies as defined in "),a("code",[e._v("poetry.lock")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -rf build  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# removing previous build")]),e._v("\npoetry "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --extras all\n")])])])])]),e._v(" "),a("h3",{attrs:{id:"use-of-developer-mode-installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-of-developer-mode-installation"}},[e._v("#")]),e._v(" Use of developer mode installation")]),e._v(" "),a("p",[e._v("Now you are able to use the library in developer mode (i.e. with code modifications directly taken into account)\nby prefixing all commands with "),a("code",[e._v("poetry run")]),e._v(".\nFor instance:")]),e._v(" "),a("ul",[a("li",[e._v("to see the list of installed packages: "),a("code",[e._v("poetry run pip list")]),e._v("  (NB: you can also use "),a("code",[e._v("poetry show")]),e._v(")")]),e._v(" "),a("li",[e._v("to run the tutorial script from examples: "),a("code",[e._v("poetry run python examples/tutorial.py")])])]),e._v(" "),a("h2",{attrs:{id:"building-the-docs-locally"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#building-the-docs-locally"}},[e._v("#")]),e._v(" Building the docs locally")]),e._v(" "),a("p",[e._v("The documentation is using "),a("a",{attrs:{href:"https://v1.vuepress.vuejs.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("VuePress"),a("OutboundLink")],1),e._v(" to generate an interactive static website.\nSome pages are generated from code thanks to the Python script "),a("code",[e._v("docs/autodoc.py")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"install-the-library-in-developer-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-the-library-in-developer-mode"}},[e._v("#")]),e._v(" Install the library in developer mode.")]),e._v(" "),a("p",[e._v("See "),a("a",{attrs:{href:"#installing-from-source-developer-mode"}},[e._v("above")]),e._v(" to install scikit-decide with poetry.")]),e._v(" "),a("h3",{attrs:{id:"install-the-documentation-dependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-the-documentation-dependencies"}},[e._v("#")]),e._v(" Install the documentation dependencies")]),e._v(" "),a("p",[e._v("The Python dependencies should have been installed in previous step,\nbut you still need to install the JavaScript ones (including VuePress).")]),e._v(" "),a("p",[e._v("First, get Yarn (package manager) by following "),a("a",{attrs:{href:"https://yarnpkg.com/en/docs/install",target:"_blank",rel:"noopener noreferrer"}},[e._v("these installation steps"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v('Make sure you are in the "scikit-decide" root directory and install documentation dependencies:')]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])])]),a("h3",{attrs:{id:"define-environment-variables-for-binder-links"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#define-environment-variables-for-binder-links"}},[e._v("#")]),e._v(" Define environment variables for binder links")]),e._v(" "),a("p",[e._v("In order to define appropriate links for notebooks (github source + launching on binder), we need several environment variables:")]),e._v(" "),a("ul",[a("li",[e._v("AUTODOC_BINDER_ENV_GH_REPO_NAME: name of the github repository hosting the binder environment")]),e._v(" "),a("li",[e._v("AUTODOC_BINDER_ENV_GH_BRANCH: branch hosting the binder environment")]),e._v(" "),a("li",[e._v("AUTODOC_NOTEBOOKS_REPO_URL: url of the content repository for the notebooks")]),e._v(" "),a("li",[e._v("AUTODOC_NOTEBOOKS_BRANCH: branch containing the notebooks")])]),e._v(" "),a("p",[e._v("For instance:")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("AUTODOC_BINDER_ENV_GH_REPO_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"airbus/scikit-decide"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("AUTODOC_BINDER_ENV_GH_BRANCH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"binder"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("current_repo_url_withdotgit")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" remote get-url origin"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("AUTODOC_NOTEBOOKS_REPO_URL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${current_repo_url_withdotgit"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(".git"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("AUTODOC_NOTEBOOKS_BRANCH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch --show-current"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n")])])]),a("h3",{attrs:{id:"build-the-docs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-the-docs"}},[e._v("#")]),e._v(" Build the docs")]),e._v(" "),a("p",[e._v('Make sure you are in the "scikit-decide" root directory and using the virtual environment where you installed scikit-decide.\nIf you used poetry, that means prepending python commands with '),a("code",[e._v("poetry run")]),e._v(".\nThen generate and serve locally the documentation with:")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("poetry run "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("yarn")]),e._v(" docs:dev\n")])])]),a("p",[e._v("NB: The above command will call  "),a("code",[e._v("python docs/autodoc.py")]),e._v(" hence the use of "),a("code",[e._v("poetry run")]),e._v(".")]),e._v(" "),a("p",[e._v("Open your web browser to access the documentation (by default on http://localhost:8080/scikit-decide/).")]),e._v(" "),a("h2",{attrs:{id:"notebooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notebooks"}},[e._v("#")]),e._v(" Notebooks")]),e._v(" "),a("p",[e._v("We try to give some introductory examples via notebooks available in the corresponding "),a("code",[e._v("notebooks/")]),e._v(" directory.")]),e._v(" "),a("h3",{attrs:{id:"integration-in-the-documentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#integration-in-the-documentation"}},[e._v("#")]),e._v(" Integration in the documentation")]),e._v(" "),a("p",[e._v("The list of these notebooks is automatically inserted in the documentation with a title and a description.\nThese are actually extracted from the first cell. To enable that, each notebook should")]),e._v(" "),a("ul",[a("li",[e._v("starts with a markdown cell,")]),e._v(" "),a("li",[e._v('its first line being the title starting with one number sign ("# "),')]),e._v(" "),a("li",[e._v("the remaining lines being used as the description.")])]),e._v(" "),a("p",[e._v("For instance:")]),e._v(" "),a("div",{staticClass:"language-markdown extra-class"},[a("pre",{pre:!0,attrs:{class:"language-markdown"}},[a("code",[a("span",{pre:!0,attrs:{class:"token title important"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("#")]),e._v(" Great notebook title")]),e._v("\n\nA quick description of the main features of the notebook.\nCan be on several lines.\n\nCan include a nice thumbnail.\n"),a("span",{pre:!0,attrs:{class:"token url"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("["),a("span",{pre:!0,attrs:{class:"token content"}},[e._v("Notebook_thumbnail")]),e._v("]("),a("span",{pre:!0,attrs:{class:"token url"}},[e._v("https://airbus.github.io/scikit-decide/maze.png")]),e._v(")")]),e._v("\n")])])]),a("h2",{attrs:{id:"unit-tests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unit-tests"}},[e._v("#")]),e._v(" Unit tests")]),e._v(" "),a("p",[e._v("Pytest is required to run unit tests. Providing you installed the library in developer mode as described "),a("a",{attrs:{href:"#installing-from-source-in-developer-mode"}},[e._v("above")]),e._v(", it should have been already installed by poetry.")]),e._v(" "),a("p",[e._v('From the "scikit-decide" root directory, run unit tests (the "-vv" verbose mode is optional but gives additional details) with:')]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("poetry run pytest -vv -s tests/solvers/cpp\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);